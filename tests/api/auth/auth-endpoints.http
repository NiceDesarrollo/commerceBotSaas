###
### üîê M√ìDULO DE AUTENTICACI√ìN - Endpoints
### Pruebas para login, registro y validaciones
###

# Variables del m√≥dulo
@baseUrl = http://localhost:3000/api
@tenantId = cmdoq78720000ogiscz0rb3zt

# Datos de prueba - Friki Plaza
@adminEmail = admin@frikiplaza.com
@adminPassword = admin123
@testEmail = empleado@frikiplaza.com
@testPassword = password123

###############################################
### üîì ENDPOINTS P√öBLICOS DE AUTENTICACI√ìN
###############################################

### 1. LOGIN - Admin existente (‚úÖ √âxito esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

### 2. REGISTRO - Nuevo usuario (‚úÖ √âxito esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}",
  "tenantId": "{{tenantId}}"
}

###############################################
### ‚ùå CASOS DE ERROR - Credenciales
###############################################

### 3. LOGIN - Credenciales incorrectas (‚ùå 401 esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "password-incorrecto"
}

### 4. LOGIN - Usuario inexistente (‚ùå 401 esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "usuario-inexistente@ejemplo.com",
  "password": "{{adminPassword}}"
}

### 5. REGISTRO - Email duplicado (‚ùå 409 esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{testPassword}}",
  "tenantId": "{{tenantId}}"
}

###############################################
### ‚ùå CASOS DE ERROR - Validaciones
###############################################

### 6. LOGIN - Email inv√°lido (‚ùå 400 esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "email-sin-formato-valido",
  "password": "{{adminPassword}}"
}

### 7. LOGIN - Campos faltantes (‚ùå 400 esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}"
}

### 8. REGISTRO - Contrase√±a muy corta (‚ùå 400 esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "nuevo@ejemplo.com",
  "password": "123",
  "tenantId": "{{tenantId}}"
}

### 9. REGISTRO - TenantId inv√°lido (‚ùå 400 esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "nuevo2@ejemplo.com",
  "password": "{{testPassword}}",
  "tenantId": "no-es-un-uuid-valido"
}

### 10. REGISTRO - TenantId inexistente (‚ùå 404 esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "nuevo3@ejemplo.com",
  "password": "{{testPassword}}",
  "tenantId": "12345678-1234-1234-1234-123456789012"
}

### 11. REGISTRO - Todos los campos faltantes (‚ùå 400 esperado)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{}

###############################################
### ‚ö° CASOS EDGE
###############################################

### 12. LOGIN - JSON malformado (‚ùå 400 esperado)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
  // JSON inv√°lido - falta coma

### 13. LOGIN - Content-Type incorrecto
POST {{baseUrl}}/auth/login
Content-Type: text/plain

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

### 14. LOGIN - M√©todo HTTP incorrecto (‚ùå 405 esperado)
GET {{baseUrl}}/auth/login

### 15. REGISTRO - Email muy largo
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "usuario-con-email-extremadamente-largo-que-supera-limites-normales@dominio-muy-muy-muy-largo.com",
  "password": "{{testPassword}}",
  "tenantId": "{{tenantId}}"
}

###############################################
### üìä VERIFICACI√ìN DE ESTRUCTURA DE RESPUESTAS
###############################################

### 16. Verificar estructura de respuesta LOGIN
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

# ‚úÖ Respuesta esperada:
# {
#   "accessToken": "eyJ...",
#   "user": {
#     "id": "string",
#     "email": "admin@tenant.com",
#     "role": "ADMIN",
#     "tenantId": "string"
#   }
# }

### 17. Verificar estructura de respuesta REGISTRO
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "email": "nuevo-usuario-test@ejemplo.com",
  "password": "{{testPassword}}",
  "tenantId": "{{tenantId}}"
}

# ‚úÖ Respuesta esperada:
# {
#   "accessToken": "eyJ...",
#   "user": {
#     "id": "string",
#     "email": "nuevo-usuario-test@ejemplo.com",
#     "role": "USER",
#     "tenantId": "string"
#   }
# }

###############################################
### üìù NOTAS PARA DESARROLLO
###############################################

# üéØ C√ìDIGOS DE RESPUESTA ESPERADOS:
# 200 - Login exitoso
# 201 - Registro exitoso  
# 400 - Error de validaci√≥n (email, password, tenantId)
# 401 - Credenciales inv√°lidas
# 404 - Tenant no encontrado
# 409 - Email ya existe

# üîß VALIDACIONES IMPLEMENTADAS:
# - Email debe ser formato v√°lido
# - Password m√≠nimo 6 caracteres
# - TenantId debe ser UUID v√°lido
# - Todos los campos son requeridos

# üîê SEGURIDAD:
# - Contrase√±as hasheadas con bcrypt
# - JWT incluye userId, email, role, tenantId
# - Mensajes de error no revelan informaci√≥n sensible 