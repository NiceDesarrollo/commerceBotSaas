###
### üõí M√ìDULO DE PRODUCTOS - CRUD (FUTURO)
### Plantilla para pruebas de productos por empresa
###

# Variables del m√≥dulo
@baseUrl = http://localhost:3000/api
@tenantId = cmdhkxgb90000ogtg90akfgel

# üîë TOKEN - Reemplazar con token real despu√©s del login
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWRoa3hnZmEwMDAyb2d0Z2N0M2pqcnA3IiwiZW1haWwiOiJhZG1pbkB0ZW5hbnQuY29tIiwicm9sZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWRoa3hnYjkwMDAwb2d0ZzkwYWtmZ2VsIiwiaWF0IjoxNzUzNDYyNTE2LCJleHAiOjE3NTQwNjczMTZ9.xeZH6YZ05Yy0-DAdMcpkssOLaElUZnKsaVtNQvdCBjo

# Variables de productos
@productId = cmdj2c19c0001ogb0s2g4z9v0
@categoryId = CATEGORY_ID_AQUI

###############################################
### üîì OBTENER TOKEN PARA PRUEBAS
###############################################

### 1. LOGIN para obtener token
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "admin@tenant.com",
  "password": "admin123"
}

###############################################
### üì¶ CRUD DE PRODUCTOS (FUTURO)
###############################################

### 2. CREAR PRODUCTO
POST {{baseUrl}}/products
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Producto de Prueba",
  "description": "Descripci√≥n del producto",
  "price": 29.99,
  "category": "Electr√≥nicos",
  "imageUrl": "https://ejemplo.com/imagen.jpg",
  "stock": 100,
  "tags": ["nuevo", "oferta"]
}

### 3. LISTAR PRODUCTOS DEL TENANT
GET {{baseUrl}}/products
Authorization: Bearer {{accessToken}}

### 4. OBTENER PRODUCTO POR ID
GET {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{accessToken}}

### 5. ACTUALIZAR PRODUCTO
PUT {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Producto Actualizado",
  "description": "Descripci√≥n actualizada",
  "price": 34.99,
  "stock": 50
}

### 6. ELIMINAR PRODUCTO
DELETE {{baseUrl}}/products/{{productId}}
Authorization: Bearer {{accessToken}}

###############################################
### üè∑Ô∏è CATEGOR√çAS (FUTURO)
###############################################

### 7. CREAR CATEGOR√çA
POST {{baseUrl}}/products/categories
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Nueva Categor√≠a",
  "description": "Descripci√≥n de la categor√≠a"
}

### 8. LISTAR CATEGOR√çAS
GET {{baseUrl}}/products/categories
Authorization: Bearer {{accessToken}}

###############################################
### üîç B√öSQUEDA Y FILTROS (FUTURO)
###############################################

### 9. BUSCAR PRODUCTOS POR NOMBRE
GET {{baseUrl}}/products/search?q=laptop
Authorization: Bearer {{accessToken}}

### 10. FILTRAR POR CATEGOR√çA
GET {{baseUrl}}/products?category=Electr√≥nicos
Authorization: Bearer {{accessToken}}

### 11. FILTRAR POR RANGO DE PRECIO
GET {{baseUrl}}/products?minPrice=20&maxPrice=50
Authorization: Bearer {{accessToken}}

###############################################
### üìä INVENTARIO (FUTURO)
###############################################

### 12. ACTUALIZAR STOCK
PATCH {{baseUrl}}/products/{{productId}}/stock
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "stock": 75,
  "operation": "set"
}

### 13. PRODUCTOS CON STOCK BAJO
GET {{baseUrl}}/products/low-stock?threshold=10
Authorization: Bearer {{accessToken}}

###############################################
### ‚ùå CASOS DE ERROR
###############################################

### 14. CREAR PRODUCTO - Datos inv√°lidos
POST {{baseUrl}}/products
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "",
  "price": -10
}

### 15. OBTENER PRODUCTO INEXISTENTE
GET {{baseUrl}}/products/id-inexistente
Authorization: Bearer {{accessToken}}

### 16. ACTUALIZAR PRODUCTO SIN PERMISOS
PUT {{baseUrl}}/products/{{productId}}
Authorization: Bearer token-invalido
Content-Type: application/json

{
  "name": "Intento de actualizaci√≥n"
}

###############################################
### üìù ESPECIFICACIONES FUTURAS
###############################################

# üéØ ENDPOINTS PLANIFICADOS:
# GET    /products                    - Listar productos del tenant
# POST   /products                    - Crear producto
# GET    /products/:id                - Obtener producto
# PUT    /products/:id                - Actualizar producto
# DELETE /products/:id                - Eliminar producto
# GET    /products/search             - Buscar productos
# GET    /products/categories         - Listar categor√≠as
# POST   /products/categories         - Crear categor√≠a
# PATCH  /products/:id/stock          - Actualizar stock

# üîê SEGURIDAD:
# - Todos los endpoints requieren JWT
# - Productos scoped por tenantId
# - Solo ADMIN puede crear/actualizar/eliminar
# - USER puede solo leer

# üè¢ MULTIEMPRESA:
# - Productos separados por tenant
# - Categor√≠as por tenant
# - Stock independiente por tenant

# üîß VALIDACIONES:
# - Nombre requerido, max 200 chars
# - Precio > 0
# - Stock >= 0
# - Categor√≠a v√°lida
# - ImageUrl formato URL v√°lido 