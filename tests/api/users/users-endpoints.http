###
### üë• M√ìDULO DE USUARIOS - Endpoints
### Pruebas para perfiles, autorizaci√≥n y multiempresa
###

# Variables del m√≥dulo
@baseUrl = http://localhost:3000/api
@tenantId = cmdhkxgb90000ogtg90akfgel

# Datos de prueba - Admin
@adminEmail = admin@tenant.com
@adminPassword = admin123

# üîë TOKEN - Reemplazar con token real despu√©s del login
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjbWRoa3hnZmEwMDAyb2d0Z2N0M2pqcnA3IiwiZW1haWwiOiJhZG1pbkB0ZW5hbnQuY29tIiwicm9sZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWRoa3hnYjkwMDAwb2d0ZzkwYWtmZ2VsIiwiaWF0IjoxNzUzNDYxODQyLCJleHAiOjE3NTQwNjY2NDJ9.XnfAzrJcWG2n-9h34H1UXu3dGVFnMSGNv-rMlaLENgU

###############################################
### üîì OBTENER TOKEN PARA PRUEBAS
###############################################

### 1. LOGIN para obtener token (ejecutar primero)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{adminEmail}}",
  "password": "{{adminPassword}}"
}

# ‚ö†Ô∏è IMPORTANTE: Copiar el accessToken de la respuesta y pegarlo en @accessToken arriba

###############################################
### üîí ENDPOINTS PROTEGIDOS - Usuarios
###############################################

### 2. PERFIL DE USUARIO - Con token v√°lido (‚úÖ 200 esperado)
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

### 3. USUARIOS DEL TENANT - Solo ADMIN (‚úÖ 200 esperado si eres ADMIN)
GET {{baseUrl}}/users/tenant-users
Authorization: Bearer {{accessToken}}

###############################################
### ‚ùå CASOS DE ERROR - Seguridad JWT
###############################################

### 4. PERFIL DE USUARIO - Sin token (‚ùå 401 esperado)
GET {{baseUrl}}/users/me

### 5. PERFIL DE USUARIO - Token inv√°lido (‚ùå 401 esperado)
GET {{baseUrl}}/users/me
Authorization: Bearer token-completamente-invalido

### 6. PERFIL DE USUARIO - Token malformado (‚ùå 401 esperado)
GET {{baseUrl}}/users/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.TOKEN_MALFORMADO

### 7. PERFIL DE USUARIO - Header Authorization malformado (‚ùå 401 esperado)
GET {{baseUrl}}/users/me
Authorization: {{accessToken}}

### 8. USUARIOS DEL TENANT - Sin token (‚ùå 401 esperado)
GET {{baseUrl}}/users/tenant-users

### 9. USUARIOS DEL TENANT - Token inv√°lido (‚ùå 401 esperado)
GET {{baseUrl}}/users/tenant-users
Authorization: Bearer token-invalido

###############################################
### ‚ö° CASOS EDGE - Endpoints
###############################################

### 10. Endpoint de usuarios inexistente (‚ùå 404 esperado)
GET {{baseUrl}}/users/endpoint-inexistente
Authorization: Bearer {{accessToken}}

### 11. M√©todo HTTP incorrecto en /me (‚ùå 405 esperado)
POST {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

### 12. M√©todo HTTP incorrecto en /tenant-users (‚ùå 405 esperado)
DELETE {{baseUrl}}/users/tenant-users
Authorization: Bearer {{accessToken}}

###############################################
### üß™ PRUEBAS DE AUTORIZACI√ìN POR ROLES
###############################################

# NOTA: Para estas pruebas necesitar√≠as crear un usuario con role USER
# y obtener su token para probar restricciones de acceso

### 13. Verificar campos en respuesta de /me
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

# ‚úÖ Respuesta esperada (ADMIN):
# {
#   "id": "string",
#   "email": "admin@tenant.com",
#   "role": "ADMIN",
#   "tenantId": "string",
#   "createdAt": "datetime",
#   "tenant": {
#     "id": "string",
#     "name": "Tenant Principal",
#     "slug": "tenant-principal",
#     "logoUrl": "string"
#   }
# }

### 14. Verificar campos en respuesta de /tenant-users
GET {{baseUrl}}/users/tenant-users
Authorization: Bearer {{accessToken}}

# ‚úÖ Respuesta esperada (ADMIN):
# [
#   {
#     "id": "string",
#     "email": "string",
#     "role": "ADMIN|USER",
#     "createdAt": "datetime"
#   }
# ]

###############################################
### üîß PRUEBAS DE RENDIMIENTO
###############################################

### 15. M√∫ltiples requests r√°pidos a /me
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

### 16. M√∫ltiples requests r√°pidos a /tenant-users
GET {{baseUrl}}/users/tenant-users
Authorization: Bearer {{accessToken}}

###############################################
### üéØ VERIFICACI√ìN DE HEADERS DE RESPUESTA
###############################################

### 17. Verificar headers CORS en /me
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

### 18. Verificar headers de Content-Type
GET {{baseUrl}}/users/me
Authorization: Bearer {{accessToken}}

###############################################
### üìù NOTAS PARA DESARROLLO
###############################################

# üéØ C√ìDIGOS DE RESPUESTA ESPERADOS:
# 200 - √âxito en /me y /tenant-users
# 401 - Sin token, token inv√°lido, token malformado
# 403 - Token v√°lido pero sin permisos (futuro: USER accediendo a /tenant-users)
# 404 - Endpoint inexistente
# 405 - M√©todo HTTP incorrecto

# üîê SEGURIDAD IMPLEMENTADA:
# - JWT requerido en todos los endpoints de users
# - Validaci√≥n de token en cada request
# - Informaci√≥n de tenant incluida en respuestas
# - Role-based access para /tenant-users (solo ADMIN)

# üè¢ MULTIEMPRESA:
# - Todos los datos est√°n scoped por tenantId
# - /users/me incluye informaci√≥n del tenant
# - /users/tenant-users solo muestra usuarios del mismo tenant

# üë§ ROLES Y PERMISOS:
# - USER: Solo puede acceder a /me
# - ADMIN: Puede acceder a /me y /tenant-users

# üîß CAMPOS DEVUELTOS:
# /me: id, email, role, tenantId, createdAt, tenant{id, name, slug, logoUrl}
# /tenant-users: id, email, role, createdAt (array) 